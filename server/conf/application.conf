date.format=dd-MM-yyyy
play.crypto.secret = "changeme"
play.editor = "http://localhost:63342/api/file/?file=%s&line=%s"
play.i18n.langs = ["lv", "en", "rus", "rvg"]

include "silhouette.conf"

# DI modules
play.modules.enabled += modules.DbAccessModule
play.modules.enabled += modules.SilhouetteModule

play.http {
  # If null, will attempt to load a class called ErrorHandler in the root package,
  errorHandler = null

  session {
    # Sets the cookie to be sent only over HTTPS.
    secure = false

    # Sets the cookie to be accessed only by the server.
    #httpOnly = true

    # Sets the domain on the session cookie.
    domain = "pusdieno.lv"
  }

  flash {
    # Sets the cookie to be sent only over HTTPS.
    secure = false

    # Sets the cookie to be accessed only by the server.
    httpOnly = true
  }
}

play.filters {
  enabled += play.filters.https.RedirectHttpsFilter
  enabled += filters.DefaultLanguageFilter
  # CORS is a protocol that allows web applications to make requests from the browser
  # across different domains.
  # NOTE: You MUST apply the CORS configuration before the CSRF filter, as CSRF has
  # dependencies on CORS settings.
  cors {
    # Filter paths by a whitelist of path prefixes
    #pathPrefixes = ["/some/path", ...]

    # The allowed origins. If null, all origins are allowed.
    #allowedOrigins = ["http://www.example.com"]

    # The allowed HTTP methods. If null, all methods are allowed
    #allowedHttpMethods = ["GET", "POST"]
  }

  ## CSRF Filter
  # https://www.playframework.com/documentation/latest/ScalaCsrf#Applying-a-global-CSRF-filter
  # https://www.playframework.com/documentation/latest/JavaCsrf#Applying-a-global-CSRF-filter
  # ~~~~~
  # Play supports multiple methods for verifying that a request is not a CSRF request.
  # The primary mechanism is a CSRF token. This token gets placed either in the query string
  # or body of every form submitted, and also gets placed in the users session.
  # Play then verifies that both tokens are present and match.
  csrf {
    # Sets the cookie to be sent only over HTTPS
    # cookie.secure = true

    # Defaults to CSRFErrorHandler in the root package.
    #errorHandler = MyCSRFErrorHandler
  }

  ## Security headers filter configuration
  # https://www.playframework.com/documentation/latest/SecurityHeaders
  # ~~~~~
  # Defines security headers that prevent XSS attacks.
  # If enabled, then all options are set to the below configuration by default:
  headers {
    contentSecurityPolicy="default-src 'self'; img-src 'self' *.googleusercontent.com; style-src 'self' 'unsafe-inline'; font-src 'self' fonts.googleapis.com; script-src 'self';"
  }

  ## Allowed hosts filter configuration
  # https://www.playframework.com/documentation/latest/AllowedHostsFilter
  # ~~~~~
  # Play provides a filter that lets you configure which hosts can access your application.
  # This is useful to prevent cache poisoning attacks.
  hosts {
    # Allow requests to example.com, its subdomains, and localhost:9000.
    allowed = ["localhost:9000"]
  }
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  config = "db"
  default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

# You can turn on SQL logging for any datasource
# https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
#default.logSql=true
#}

slick.dbs.default.driver = "slick.driver.PostgresDriver$"
slick.dbs.default.db.driver = "org.postgresql.Driver"
slick.dbs.default.db.url = "jdbc:postgresql://localhost:5432/pusdienodb"
slick.dbs.default.db.user = "pusdieno"
slick.dbs.default.db.password = "password"

play.evoutions.db.default.autoApply=true
